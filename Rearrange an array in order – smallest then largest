#include <stdio.h>
void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}
int partition(int array[], int low, int high) {
 
  int pivot = array[high];
  int i = (low - 1);
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
      i++;
      swap(&array[i], &array[j]);
    }
  }
  swap(&array[i + 1], &array[high]);
 
  return (i + 1);
}
void quickSort(int array[], int low, int high) {
  if (low < high) {
    
    int pi = partition(array, low, high);

    quickSort(array, low, pi - 1);
    quickSort(array, pi + 1, high);
  }
}
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}
void rearrange(int array[],int n){
     quickSort(array, 0, n - 1);
     int temparr[n];
     int aindex=0;
     for (int i = 0, j = n-1; i <= n / 2 ||
                    j > n / 2; i++, j--) {
        temparr[aindex] = array[i];
        aindex++;
        temparr[aindex] = array[j];
        aindex++;
    }
    for (int i = 0; i < n; i++)
        array[i] = temparr[i];
}
int main() {
    int arr[]={ 5, 8, 1, 4, 2, 9, 3, 7, 6 };
    int n = sizeof(arr)/sizeof(arr[0]);
     rearrange(arr, n);
 
    for (int i = 0; i < n; i++){
         printf(" %d ", arr[i]);
  
  printf("\n");
    } 
    return 0;
}
